{"version":3,"sources":["../../src/js/horizontalScrollToElements.js"],"names":["horizontalScrollToElements","container","elements","currentElement","maxElementNumber","length","e","deltaY","scrollLeft","scrollLeftMax","Math","min","max","offsetLeft"],"mappings":";;AAAA;;;;;;;;;;AAUA,IAAMA,6BAA6B,SAA7BA,0BAA6B,CAACC,SAAD,EAAYC,QAAZ,EAAyB;AAC1D,MAAIC,iBAAiB,CAArB;AACA,MAAMC,mBAAmBF,SAASG,MAAT,GAAkB,CAA3C;;AAEA,SAAO,aAAK;AACV,QAAGC,EAAEC,MAAF,GAAW,CAAd,EAAiB;AACf,UAAGN,UAAUO,UAAV,GAAuBP,UAAUQ,aAApC,EACEN,iBAAiBO,KAAKC,GAAL,CAASP,gBAAT,EAA2BD,iBAAiB,CAA5C,CAAjB;AACH,KAHD,MAGO;AACL,SAAG;AACDA,yBAAiBO,KAAKE,GAAL,CAAS,CAAT,EAAYT,iBAAiB,CAA7B,CAAjB;AACD,OAFD,QAEQD,SAASC,cAAT,EAAyBU,UAAzB,GAAsCZ,UAAUQ,aAFxD;AAGD;AACDR,cAAUO,UAAV,GAAuBN,SAASC,cAAT,EAAyBU,UAAhD;AACD,GAVD;AAWD,CAfD","file":"horizontalScrollToElements.js","sourcesContent":["/**\n * returns a callback for 'wheel' event\n * which scroll the elements under given container horizontally\n * to reach a start point of one of elements given\n *\n * @param {HTMLElement} container element to accept scroll events\n * @param {HTMLCollection} elements collection of elements that will work as scroll snap points\n *\n * @return {callback}\n */\nconst horizontalScrollToElements = (container, elements) => {\n  let currentElement = 0;\n  const maxElementNumber = elements.length - 1;\n\n  return e => {\n    if(e.deltaY > 0) {\n      if(container.scrollLeft < container.scrollLeftMax)\n        currentElement = Math.min(maxElementNumber, currentElement + 1);\n    } else {\n      do {\n        currentElement = Math.max(0, currentElement - 1);\n      } while(elements[currentElement].offsetLeft > container.scrollLeftMax);\n    }\n    container.scrollLeft = elements[currentElement].offsetLeft;\n  };\n};\n"]}